REGISTER '/home/Ashmita/hadoop/Ashmita/Docker/twitterjars/elephant-bird-core-4.13.jar';
REGISTER '/home/Ashmita/hadoop/Ashmita/Docker/twitterjars/elephant-bird-hadoop-compat-4.13.jar';
REGISTER '/home/Ashmita/hadoop/Ashmita/Docker/twitterjars/elephant-bird-pig-4.13.jar';
REGISTER '/home/Ashmita/hadoop/Ashmita/Docker/Datafujar/datafu-1.2.0.jar';
DEFINE TwitterJsonLoader com.twitter.elephantbird.pig.load.JsonLoader('- nestedLoad=true ');
JsonInputbus = LOAD '/user/cloudera/yelpdataset/yelp_academic_dataset_business.json' USING TwitterJsonLoader() AS (entity: map[]);
JsonInputrev = LOAD '/user/cloudera/yelpdataset/yelp_academic_dataset_review.json' USING TwitterJsonLoader() AS (entity: map[]);
rawtablebusiness = FOREACH JsonInputbus GENERATE (CHARARRAY)$0#'type' as type, (CHARARRAY)$0#'name' as name,(CHARARRAY)$0#'business_id' as business_id,(CHARARRAY)$0#'categories' as categories:chararray,(double)$0#'stars' as stars:double,(double)$0#'latitude' as latitude:double,(double)$0#'longitude' as longitude:double;
rawtablereview = FOREACH JsonInputrev GENERATE (CHARARRAY)$0#'business_id' as business_id, (CHARARRAY)$0#'user_id' as user_id,(CHARARRAY)$0#'text' as text:chararray,(double)$0#'stars' as stars:double,(CHARARRAY)$0#'date' as date;
rawtablereview1 = FOREACH rawtablereview GENERATE business_id,user_id,text,stars,ToDate(date, 'yyyy-MM-dd') as (date:DateTime);
rawtablerev_Month = FOREACH rawtablereview1 GENERATE business_id,user_id,text,(double)stars,date,GetMonth(date) as Month,GetYear(date) as Year;
tok_table = FOREACH rawtablebusiness  GENERATE type,name,business_id,stars,latitude,longitude,TOKENIZE(categories,',') as cattuple;
tup_table = FOREACH tok_table GENERATE type,name,business_id,stars,latitude,longitude,FLATTEN(cattuple) as dup_category;
cle_data = FOREACH tup_table GENERATE type,name,business_id,stars,latitude,longitude,REPLACE(dup_category,'\\"','') as category;
clean_table = FOREACH cle_data GENERATE type,name,business_id,stars,latitude,longitude,REPLACE(category,'\\[','') as category;
clean_table = FOREACH clean_table GENERATE name,business_id,(double)stars,(double)latitude,(double)longitude,REPLACE(category,'\\]','') as category;
clean_table = FILTER clean_table BY category is not null;
food_business = FILTER clean_table BY category MATCHES '(?i).*food.*';
distance_find = FOREACH food_business GENERATE business_id,name,category,(double)stars,(double)latitude,(double)longitude,datafu.pig.geo.HaversineDistInMiles(latitude, longitude, 40.4411801, -79.9428294) as distance;
clean_dist = FILTER distance_find BY (distance <= 5.0);
rank_food_cmu_bus= RANK clean_dist by stars DESC;
sorted_top = order rank_food_cmu_bus by rank_clean_dist asc;
top10business = limit sorted_top 10;
sorted_bottom = order rank_food_cmu_bus by rank_clean_dist desc;
bottom10business = limit sorted_bottom 10;
businessofinterest= UNION top10business,bottom10business;
busi_review = JOIN businessofinterest BY business_id,rawtablerev_Month BY business_id;
group_busi_review = GROUP busi_review BY (businessofinterest::business_id,Month,Year);
avg_rating_month = FOREACH group_busi_review GENERATE FLATTEN(group) AS (business_id,Month,Year),AVG(busi_review.rawtablerev_Month::stars) AS Avg_Num_of_Stars;
STORE clean_dist into './Question5/FoodRelatedBusinessAroundCMU(5)';
STORE top10business into './Question5/Top10business'; 
STORE bottom10business into './Question5/Bottom10business'; 
STORE businessofinterest into './Question5/Business_Interest'; 
STORE group_busi_review into './Question5/GroupedData'; 
STORE avg_rating_month into './Question5/Result';